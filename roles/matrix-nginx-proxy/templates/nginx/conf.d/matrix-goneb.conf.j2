server {
	listen {{ 8080 if matrix_nginx_proxy_enabled else 80 }};
	server_name {{ matrix_nginx_proxy_proxy_dimension_hostname }};

	server_tokens off;

	location /.well-known/acme-challenge {
		{% if matrix_nginx_proxy_enabled %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "matrix-certbot:8080";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for use outside of our container setup #}
			proxy_pass http://127.0.0.1:{{ matrix_ssl_lets_encrypt_certbot_standalone_http_port }};
		{% endif %}
	}

	location / {
		return 301 https://$http_host$request_uri;
	}
}

server {
	listen {{ 8443 if matrix_nginx_proxy_enabled else 443 }} ssl http2;
	listen [::]:{{ 8443 if matrix_nginx_proxy_enabled else 443 }} ssl http2;

	server_name {{ matrix_nginx_proxy_proxy_dimension_hostname }};

	server_tokens off;
	root /dev/null;

	gzip on;
	gzip_types text/plain application/json application/javascript text/css image/x-icon font/ttf image/gif;

	ssl_certificate {{ matrix_ssl_config_dir_path }}/live/{{ matrix_nginx_proxy_proxy_goneb_hostname }}/fullchain.pem;
	ssl_certificate_key {{ matrix_ssl_config_dir_path }}/live/{{ matrix_nginx_proxy_proxy_goneb_hostname }}/privkey.pem;
	ssl_protocols {{ matrix_nginx_proxy_ssl_protocols }};
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

	location / {
		{% if matrix_nginx_proxy_enabled %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "matrix-goneb:{{ matrix_goneb_container_port }}";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for use outside of our container setup #}
			proxy_pass "http://127.0.0.1:{{ matrix_goneb_container_port }}";
		{% endif %}

		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $remote_addr;
	}
}
